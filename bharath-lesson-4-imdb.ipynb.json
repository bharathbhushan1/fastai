{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastai.text import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Set batch size so that GPU memory OOM is avoided"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "bs=48"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Download the data\n",
    "\n",
    "This data is laid out in Imagenet style. There are separate train and test folders. There is also a folder `unsup` with unlabelled data which can be used for the language modelling part (but not the actual text classification / sentiment analysis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[PosixPath('/home/jupyter/.fastai/data/imdb/tmp_clas'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/unsup'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/imdb.vocab'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/tmp_lm'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/data_lm.pkl'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/test'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/models'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/train'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/README')]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path = untar_data(URLs.IMDB)\n",
    "path.ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[PosixPath('/home/jupyter/.fastai/data/imdb/train/labeledBow.feat'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/train/pos'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/train/unsupBow.feat'),\n",
       " PosixPath('/home/jupyter/.fastai/data/imdb/train/neg')]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(path/'train').ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 61M\r\n",
      "-rw-r--r-- 1 jupyter jupyter  21M Apr 12  2011 labeledBow.feat\r\n",
      "drwxr-xr-x 2 jupyter jupyter 352K Nov  5  2018 neg\r\n",
      "drwxr-xr-x 2 jupyter jupyter 368K Nov  5  2018 pos\r\n",
      "-rw-r--r-- 1 jupyter jupyter  40M Apr 12  2011 unsupBow.feat\r\n"
     ]
    }
   ],
   "source": [
    "! ls -lh {path}/train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Reading the text for language modeling\n",
    "* `from_folder` - reads all files in the folder recursively.\n",
    "* `filter_by_folder` - keeps only the relevant files. here even unlabeled data is taken because this is just unsupervised modeling (representational learning) and we can take advantage of all the data we can get.\n",
    "* `split_by_rand_pct` - creates two dataloaders, one for training and one for validation (randomly with 0.1 probability of being validation item).\n",
    "* `label_for_lm` - in every epoch it shuffles all sentences, concats them and gives that as input. also does not label the data since labels are unimportant for modeling. \n",
    "\n",
    "So suppose there are 3 sentences.\n",
    "* The tiger is a dangerous animal.\n",
    "* The elephant is vegan.\n",
    "* Humans eat anything that moves (and does not move).\n",
    "\n",
    "Now one hypothetical epoch could be (assuming batch size=4)\n",
    "* the elephant is vegan\n",
    "* humans eat anything that\n",
    "* moves and does not\n",
    "* move the tiger is\n",
    "* a dangerous animal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_lm = (TextList.from_folder(path)\n",
    "           .filter_by_folder(include=['train', 'test', 'unsup'])\n",
    "           .split_by_rand_pct(0.1)\n",
    "           .label_for_lm()\n",
    "           .databunch(bs=bs)\n",
    "          )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Save the mapping\n",
    "This helps to avoid slowness due to listing of files, filtering, id assignments etc.\n",
    "I have not seen much of a problem due to this, so saving is really optional as of now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_lm.save(\"data_lm.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_lm = load_data(path, \"data_lm.pkl\", bs=bs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>idx</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>and -- a couple who are jewel thieves . \\n \\n  xxmaj it zings along and is great , amusing , romantic fun . xxbos xxmaj no matter how brilliant and stunning the screenplay would have been , this sequel to ` xxmaj henry , xxmaj portrait of a xxmaj serial xxmaj killer ' was doomed to automatically lose 99 % percent of its power . xxmaj why ?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>a village lass played by xxmaj jenny xxmaj agutter ; they have maybe five or six minutes of conversation ( fully clothed , which is rare for xxmaj agutter ) , whereupon the lass falls so deeply in love with the xxup ira man that she shoots the xxmaj english lout dead and proceeds to betray her fellow villagers -- indeed , her entire country . i suspect that some</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>dangerous hit - man , xxmaj john xxmaj turturro , show up the meeting is canceled . xxmaj irène quickly learns that xxmaj elliot has secret information concerning imminent events in the xxup us . xxmaj the meeting is xxunk for xxmaj september 10th in xxmaj venice . xxmaj irène and xxmaj elliot 's children head to xxmaj venice with xxmaj william xxmaj pound in toe for a showdown with</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>urban xxmaj legends series , but after loving the first two , for what they were , and this one being directed by xxmaj mary xxmaj lambert ( who i adored for her work with xxmaj madonna and \" xxmaj pet xxmaj xxunk \" ) , i expected a descent movie . \\n \\n  xxmaj not even close . \\n \\n  xxmaj there was no logical reason behind</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>a xxmaj trick xxmaj baby . xxmaj it is violent , can be repulsive and disgusting , and is not for everybody . xxmaj but if you like this type of film , this is a great film . xxmaj by all means i recomend it highly , especially if you want to see more of xxmaj jennifer xxmaj tilly than you have before . xxmaj definately an unusal but</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_lm.show_batch()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('.', 10), (',', 11), ('and', 12), ('a', 13), ('of', 14)]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[x for x in data_lm.vocab.stoi.items()][10:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'xxbos xxmaj this is the best of the xxma'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_lm.train_ds[0][0].text[:40]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   2,    5,   20,   16,    9,  139,   14,    9,    5, 4975])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_lm.train_ds[0][0].data[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Create the neural network to learn the language model\n",
    "* The input data bunch is provided\n",
    "* `AWD_LSTM` is a recurrent network with an embedding layer followed by three LSTM layers (with dropouts).\n",
    "* `drop_mult` - is unclear, seems to be some kind of a common multiplier for all dropout `p` values. So if you ask for 0.4 value of `p` (so that 40% neurons are dropped every training step), then the effective `p` becomes `0.12` thus ensuring not much dropout happens. This is again some Jeremy Howard magic.\n",
    "\n",
    "#### AWD_LSTM\n",
    "* `AWD_LSTM` stands for `AWD Long short term memory` neural networks\n",
    "* `AWD` stands for `ASGD Weight Dropped`. Basically dropout layers are intelligently used even in the recurrent network to provide regularization.\n",
    "* `ASGD` stands for `Average SGD`. Actually the variant proposed in the paper is called `NT-ASGD` probably for `non-monotonic trigger`\n",
    "* fast.ai does not seem to use ASGD or NT-ASGD as the paper advises. \n",
    "* great resource for understanding the paper https://yashuseth.blog/2018/09/12/awd-lstm-explanation-understanding-language-model/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SequentialRNN(\n",
       "  (0): AWD_LSTM(\n",
       "    (encoder): Embedding(60000, 400, padding_idx=1)\n",
       "    (encoder_dp): EmbeddingDropout(\n",
       "      (emb): Embedding(60000, 400, padding_idx=1)\n",
       "    )\n",
       "    (rnns): ModuleList(\n",
       "      (0): WeightDropout(\n",
       "        (module): LSTM(400, 1152, batch_first=True)\n",
       "      )\n",
       "      (1): WeightDropout(\n",
       "        (module): LSTM(1152, 1152, batch_first=True)\n",
       "      )\n",
       "      (2): WeightDropout(\n",
       "        (module): LSTM(1152, 400, batch_first=True)\n",
       "      )\n",
       "    )\n",
       "    (input_dp): RNNDropout()\n",
       "    (hidden_dps): ModuleList(\n",
       "      (0): RNNDropout()\n",
       "      (1): RNNDropout()\n",
       "      (2): RNNDropout()\n",
       "    )\n",
       "  )\n",
       "  (1): LinearDecoder(\n",
       "    (decoder): Linear(in_features=400, out_features=60000, bias=True)\n",
       "    (output_dp): RNNDropout()\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "learn.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n"
     ]
    }
   ],
   "source": [
    "learn.lr_find()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SequentialRNN\n",
       "======================================================================\n",
       "Layer (type)         Output Shape         Param #    Trainable \n",
       "======================================================================\n",
       "RNNDropout           [70, 400]            0          False     \n",
       "______________________________________________________________________\n",
       "RNNDropout           [70, 1152]           0          False     \n",
       "______________________________________________________________________\n",
       "RNNDropout           [70, 1152]           0          False     \n",
       "______________________________________________________________________\n",
       "Linear               [70, 60000]          24,060,000 True      \n",
       "______________________________________________________________________\n",
       "RNNDropout           [70, 400]            0          False     \n",
       "______________________________________________________________________\n",
       "\n",
       "Total params: 24,060,000\n",
       "Total trainable params: 24,060,000\n",
       "Total non-trainable params: 0\n",
       "Optimized with 'torch.optim.adam.Adam', betas=(0.9, 0.99)\n",
       "Using true weight decay as discussed in https://www.fast.ai/2018/07/02/adam-weight-decay/ \n",
       "Loss function : FlattenedLoss\n",
       "======================================================================\n",
       "Callbacks functions applied \n",
       "    RNNTrainer"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "learn.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.recorder.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.recorder.plot(skip_end=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "        <style>\n",
       "            /* Turns off some styling */\n",
       "            progress {\n",
       "                /* gets rid of default border in Firefox and Opera. */\n",
       "                border: none;\n",
       "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "                background-size: auto;\n",
       "            }\n",
       "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "                background: #F44336;\n",
       "            }\n",
       "        </style>\n",
       "      <progress value='0' class='' max='1', style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      0.00% [0/1 00:00<00:00]\n",
       "    </div>\n",
       "    \n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table><p>\n",
       "\n",
       "    <div>\n",
       "        <style>\n",
       "            /* Turns off some styling */\n",
       "            progress {\n",
       "                /* gets rid of default border in Firefox and Opera. */\n",
       "                border: none;\n",
       "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "                background-size: auto;\n",
       "            }\n",
       "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "                background: #F44336;\n",
       "            }\n",
       "        </style>\n",
       "      <progress value='907' class='' max='8038', style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      11.28% [907/8038 05:17<41:40 4.2589]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.fit_one_cycle(1, 1e-2, moms=(0.8,0.7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn.save('lm-1')\n",
    "learn.load('lm-1');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn.unfreeze()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "        <style>\n",
       "            /* Turns off some styling */\n",
       "            progress {\n",
       "                /* gets rid of default border in Firefox and Opera. */\n",
       "                border: none;\n",
       "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "                background-size: auto;\n",
       "            }\n",
       "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "                background: #F44336;\n",
       "            }\n",
       "        </style>\n",
       "      <progress value='0' class='' max='2', style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      0.00% [0/2 00:00<00:00]\n",
       "    </div>\n",
       "    \n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table><p>\n",
       "\n",
       "    <div>\n",
       "        <style>\n",
       "            /* Turns off some styling */\n",
       "            progress {\n",
       "                /* gets rid of default border in Firefox and Opera. */\n",
       "                border: none;\n",
       "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "                background-size: auto;\n",
       "            }\n",
       "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "                background: #F44336;\n",
       "            }\n",
       "        </style>\n",
       "      <progress value='35' class='' max='898', style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      3.90% [35/898 00:05<02:08]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.fit_one_cycle(2, 1e-3, moms=(0.8,0.7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "[x for x in data_lm.vocab.stoi.items()][10:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
